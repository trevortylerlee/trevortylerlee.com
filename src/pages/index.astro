---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import profilePicture from "@assets/me-with-roxy.jpg";
import classlessCSS from "@assets/posts/classlesscss.png";
import t2a from "@assets/posts/t2a.jpg";
import phished from "@assets/posts/phished.png";
import animatedPhished from "/phished-animated.mp4";
import swiftiedotred from "@assets/posts/swiftiedotred.jpg";
import thirtysixquestions from "@assets/posts/thirtysixquestions.jpg";
import BaseLayout from "src/layouts/BaseLayout.astro";
import { formatBlogPost } from "src/lib/utils";
import { getCollection } from "astro:content";
import Post from "@components/Post.astro";
import Project from "@components/Project.astro";
import PhishedProject from "@components/PhishedProject.astro";
import ProfileCard from "@components/ProfileCard.astro";

import roxy1 from "@assets/roxy/roxy-1.jpg";
import roxy2 from "@assets/roxy/roxy-2.jpg";
import roxy3 from "@assets/roxy/roxy-3.jpg";
import roxy4 from "@assets/roxy/roxy-4.jpg";
import roxy5 from "@assets/roxy/roxy-5.jpg";
import roxy6 from "@assets/roxy/roxy-6.jpg";
import roxy7 from "@assets/roxy/roxy-7.jpg";
import roxy8 from "@assets/roxy/roxy-8.jpg";
import roxy9 from "@assets/roxy/roxy-9.jpg";
import roxy10 from "@assets/roxy/roxy-10.jpg";
import roxy11 from "@assets/roxy/roxy-11.jpg";
import roxy12 from "@assets/roxy/roxy-12.jpg";
import roxy13 from "@assets/roxy/roxy-13.jpg";
import roxy14 from "@assets/roxy/roxy-14.jpg";
import roxy15 from "@assets/roxy/roxy-15.jpg";
import roxy16 from "@assets/roxy/roxy-16.jpg";
import roxy17 from "@assets/roxy/roxy-17.jpg";
import roxy18 from "@assets/roxy/roxy-18.jpg";
import roxy19 from "@assets/roxy/roxy-19.jpg";
import roxy20 from "@assets/roxy/roxy-20.jpg";
import roxy21 from "@assets/roxy/roxy-21.jpg";

const images = [
  roxy1,
  roxy2,
  roxy3,
  roxy4,
  roxy5,
  roxy6,
  roxy7,
  roxy8,
  roxy9,
  roxy10,
  roxy11,
  roxy12,
  roxy13,
  roxy14,
  roxy15,
  roxy16,
  roxy17,
  roxy18,
  roxy19,
  roxy20,
  roxy21,
];

const allPosts = await getCollection("posts");
const formattedPosts = formatBlogPost(allPosts, {
  limit: 5,
});

const pageTitle = "Trevor Lee | Homepage";
---

<BaseLayout pageTitle={pageTitle}>
  <div class="flex flex-col gap-6 py-16 sm:py-24">
    <ProfileCard images={images} featureImage={profilePicture} />
  </div>
  <section>
    <span class="py-2 font-mono text-sm text-textVariant">
      <h2 class="py-2">latest posts</h2>
    </span>
    <ul>
      {
        formattedPosts.map((post) => (
          <Post
            date={post.data.date}
            href={post.slug}
            title={post.data.title}
            description={post.data.description}
          />
        ))
      }
    </ul>
    <div class="flex justify-end pb-8">
      <a href="/posts" class="link group flex items-center gap-1 py-2"
        >view older posts <Icon
          class="text-text group-hover:animate-horizontal-bounce group-hover:text-primary group-focus:animate-horizontal-bounce group-focus-visible:text-primary"
          name="arrow-right"
        /></a
      >
    </div>
  </section>
  <section>
    <h2 class="pb-4 pt-16 font-mono text-sm text-textVariant">projects</h2>
    <ul class="grid gap-3 sm:grid-cols-2 sm:gap-6">
      <Project
        description="These thirty six questions foster closeness through mutual vulnerability."
        href="https://thirtysixquestions.org"
        title="thirtysixquestions.org"
        src={thirtysixquestions}
        online
      />
      <Project
        description="The best website for Swifties."
        href="https://swiftie.red"
        title="swiftie.red"
        src={swiftiedotred}
        online
      />
      <Project
        description="Site to instantly preview drop-in CSS themes."
        href="https://classlesscss.com"
        title="classlesscss.com"
        src={classlessCSS}
        online
      />
      <Project
        description="Tired of typing out arrays? Me too..."
        href="https://text2array.vercel.app/"
        title="Text 2 Array"
        src={t2a}
        online
      />
      <PhishedProject
        description="Protect your friends and family from phishing attacks by phishing them yourself."
        href="https://github.com/phished-co/phished_web_app"
        title="Phished"
        imageSrc={phished}
        videoSrc={animatedPhished}
      />
    </ul>
  </section>
  <click-spark active-on="[data-sparks]"></click-spark>
</BaseLayout>

<script is:inline>
  // https://ryanmulligan.dev/

  class ClickSpark extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.root = document.documentElement;
      this.svg;
    }

    get activeEls() {
      return this.getAttribute("active-on");
    }

    connectedCallback() {
      this.setupSpark();

      const clickHandler = (e) => {
        if (this.activeEls && !e.target.matches(this.activeEls)) return;

        this.setSparkPosition(e);
        this.animateSpark();
      };

      const touchHandler = (e) => {
        if (this.activeEls && !e.target.matches(this.activeEls)) return;

        const touch = e.touches[0];
        const simulatedMouseEvent = new MouseEvent("click", {
          clientX: touch.clientX,
          clientY: touch.clientY,
        });
        this.setSparkPosition(simulatedMouseEvent);
        this.animateSpark();
      };

      this.root.addEventListener("click", clickHandler);
      this.root.addEventListener("touchstart", touchHandler);
    }

    animateSpark() {
      let sparks = [...this.svg.children];
      let size = parseInt(sparks[0].getAttribute("y1"));
      let offset = size / 2 + "px";

      let keyframes = (i) => {
        let deg = `calc(${i} * (360deg / ${sparks.length}))`;

        return [
          {
            strokeDashoffset: size * 3,
            transform: `rotate(${deg}) translateY(${offset})`,
          },
          {
            strokeDashoffset: size,
            transform: `rotate(${deg}) translateY(0)`,
          },
        ];
      };

      let options = {
        duration: 500,
        easing: "cubic-bezier(0.25, 1, 0.5, 1)",
        fill: "forwards",
      };

      sparks.forEach((spark, i) => spark.animate(keyframes(i), options));
    }

    setSparkPosition(e) {
      let rect = this.root.getBoundingClientRect();

      this.svg.style.left =
        e.clientX - rect.left - this.svg.clientWidth / 2 + "px";
      this.svg.style.top =
        e.clientY - rect.top - this.svg.clientHeight / 2 + "px";
    }

    setupSpark() {
      let template = `
      <style>
        :host {
          display: contents;
        }

        svg {
          pointer-events: none;
          position: absolute;
          rotate: -20deg;
          stroke: var(--click-spark-color, currentcolor);
        }

        line {
          stroke-dasharray: 30;
          stroke-dashoffset: 30;
          transform-origin: center;
        }
      </style>
      <svg width="30" height="30" viewBox="0 0 100 100" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="4">
        ${Array.from(
          { length: 8 },
          (_) => `<line x1="50" y1="30" x2="50" y2="4"/>`
        ).join("")}
      </svg>
    `;

      this.shadowRoot.innerHTML = template;
      this.svg = this.shadowRoot.querySelector("svg");
    }
  }

  customElements.define("click-spark", ClickSpark);

  const spark = document.querySelector("click-spark");
  spark.style.setProperty("--click-spark-color", `rgb(var(--primary))`);
</script>
