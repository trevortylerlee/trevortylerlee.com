---
import "../styles/global.css";
import "@fontsource/atkinson-hyperlegible/400.css";
import "@fontsource/atkinson-hyperlegible/700.css";

import Navigation from "../components/Navigation.astro";

const { pageTitle, pageSlug, category, fullWidth } = Astro.props;
---

<html id="html" lang="en" prefix="og: http://ogp.me/ns#">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" href="/favicon.png" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:image" content="/og.jpg" />
    <meta name="description" content="Trevor Tyler Lee | Vancouver, Canada" />
    <title>{pageTitle}</title>
  </head>
  <body class="bg-background text-content" id="body">
    <div>
      <Navigation
        category={category}
        pageSlug={pageSlug}
        pageTitle={pageTitle}
      />
      <main class=`m-auto ${fullWidth ? "" : " px-6"} max-w-[640px]`>
        <slot />
        <click-spark active-on=".send-sparks, #i-love-sparks, [data-sparks]"
        ></click-spark>
      </main>
    </div>
  </body>
</html>

<script is:inline>
  // https://ryanmulligan.dev/

  class ClickSpark extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.root = document.documentElement;
      this.svg;
    }

    get activeEls() {
      return this.getAttribute("active-on");
    }

    connectedCallback() {
      this.setupSpark();

      this.root.addEventListener("click", (e) => {
        if (this.activeEls && !e.target.matches(this.activeEls)) return;

        this.setSparkPosition(e);
        this.animateSpark();
      });
    }

    animateSpark() {
      let sparks = [...this.svg.children];
      let size = parseInt(sparks[0].getAttribute("y1"));
      let offset = size / 2 + "px";

      let keyframes = (i) => {
        let deg = `calc(${i} * (360deg / ${sparks.length}))`;

        return [
          {
            strokeDashoffset: size * 3,
            transform: `rotate(${deg}) translateY(${offset})`,
          },
          {
            strokeDashoffset: size,
            transform: `rotate(${deg}) translateY(0)`,
          },
        ];
      };

      let options = {
        duration: 500,
        easing: "cubic-bezier(0.25, 1, 0.5, 1)",
        fill: "forwards",
      };

      sparks.forEach((spark, i) => spark.animate(keyframes(i), options));
    }

    setSparkPosition(e) {
      let rect = this.root.getBoundingClientRect();

      this.svg.style.left =
        e.clientX - rect.left - this.svg.clientWidth / 2 + "px";
      this.svg.style.top =
        e.clientY - rect.top - this.svg.clientHeight / 2 + "px";
    }

    setupSpark() {
      let template = `
      <style>
        :host {
          display: contents;
        }
        
        svg {
          pointer-events: none;
          position: absolute;
          rotate: -20deg;
          stroke: var(--click-spark-color, currentcolor);
        }

        line {
          stroke-dasharray: 30;
          stroke-dashoffset: 30;
          transform-origin: center;
        }
      </style>
      <svg width="30" height="30" viewBox="0 0 100 100" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="4">
        ${Array.from(
          { length: 8 },
          (_) => `<line x1="50" y1="30" x2="50" y2="4"/>`,
        ).join("")}
      </svg>
    `;

      this.shadowRoot.innerHTML = template;
      this.svg = this.shadowRoot.querySelector("svg");
    }
  }

  customElements.define("click-spark", ClickSpark);

  const spark = document.querySelector("click-spark");
  spark.style.setProperty("--click-spark-color", `rgb(var(--primary))`);
  const colorPicker = document.getElementById("click-spark-color");
</script>
