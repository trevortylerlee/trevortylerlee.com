---
import "../styles/global.css";
import "../styles/preflight.css";

import { ViewTransitions } from "astro:transitions";

import "@fontsource/geist-sans/400.css";
import "@fontsource/geist-sans/500.css";
import "@fontsource/geist-sans/600.css";
import "@fontsource/geist-sans/700.css";
import "@fontsource/geist-sans/800.css";
import "@fontsource/geist-sans/900.css";
import "@fontsource/geist-mono/400.css";
import "@fontsource/geist-mono/700.css";

import { Icon } from "astro-icon/components";

import Navigation from "../components/Navigation.astro";
import Contact from "../components/Contact.tsx";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import Footer from "@components/Footer.astro";

const { pageTitle, pageSlug, category, fullWidth } = Astro.props;

let onIndex = false;
if (pageTitle === "Trevor Lee | Homepage") {
  onIndex = true;
}
---

<html id="html" lang="en" prefix="og: http://ogp.me/ns#">
  <head>
    <script is:inline data-astro-rerun>
      function init() {
        const themes = [
          "dark",
          "light",
          "hacker",
          "red-dragon",
          "snes",
          "ube",
          "vice-city",
        ];

        const applyTheme = (theme) => {
          const themesToRemove = themes.filter((t) => t !== theme);
          themesToRemove.forEach((t) => {
            document.documentElement.classList.remove(t);
          });
          document.documentElement.classList.add(theme);
        };

        const getPreferredTheme = () => {
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          } else {
            return "light";
          }
        };

        const setGiscusTheme = (theme) => {
          const giscus = document.querySelector(".giscus-frame");

          if (giscus) {
            const url = new URL(giscus.src);
            url.searchParams.set("theme", theme);
            giscus.src = url.toString();
          }
        };

        const savedTheme = localStorage.getItem("theme");
        const theme = savedTheme ? savedTheme : getPreferredTheme();
        applyTheme(theme);

        if (
          theme === "dark" ||
          theme === "red-dragon" ||
          theme === "vice-city"
        ) {
          setGiscusTheme("dark");
        } else {
          setGiscusTheme("light");
        }
      }

      document.addEventListener("astro:page-load", () => {
        const themes = [
          "dark",
          "light",
          "hacker",
          "red-dragon",
          "snes",
          "ube",
          "vice-city",
        ];

        const applyTheme = (theme) => {
          const themesToRemove = themes.filter((t) => t !== theme);
          themesToRemove.forEach((t) => {
            document.documentElement.classList.remove(t);
          });
          document.documentElement.classList.add(theme);
        };

        const getPreferredTheme = () => {
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          } else {
            return "light";
          }
        };

        const toggleTheme = () => {
          const selectedTheme = select.value;

          if (selectedTheme === "auto") {
            localStorage.removeItem("theme");
            const newTheme = getPreferredTheme();
            applyTheme(newTheme);
            setGiscusTheme(newTheme);
          } else {
            localStorage.setItem("theme", selectedTheme);
            applyTheme(selectedTheme);

            if (
              selectedTheme === "dark" ||
              selectedTheme === "red-dragon" ||
              selectedTheme === "vice-city"
            ) {
              setGiscusTheme("dark");
            } else {
              setGiscusTheme("light");
            }
          }
        };

        const setGiscusTheme = (theme) => {
          const giscus = document.querySelector(".giscus-frame");

          if (giscus) {
            const url = new URL(giscus.src);
            url.searchParams.set("theme", theme);
            giscus.src = url.toString();
          }
        };

        init();
        const savedTheme = localStorage.getItem("theme");
        const select = document.querySelector("#theme-toggle");
        select.value = savedTheme ? savedTheme : "auto";
        select.addEventListener("change", toggleTheme);
      });
      init();
    </script>
    <script
      defer
      src="https://analytics.us.umami.is/script.js"
      data-website-id="db9f8fea-3974-458c-8aeb-27c9461841e4"></script>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" href="/favicon.png" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Trevor Tyler Lee"
      href="https://trevortylerlee.com/rss.xml"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:image" content="/og.jpg" />
    <meta name="description" content="Trevor Tyler Lee | @trevortylerlee " />
    <title>{pageTitle}</title>
    <ViewTransitions />
  </head>
  <body class="bg-backdrop">
    <div
      class=`bg-centerBackground text-text ${fullWidth ? "" : "px-4"} m-auto max-w-[640px]`
    >
      <nav class="w-full py-4">
        <div class="items-top flex justify-between">
          <div class="">
            {
              !onIndex && (
                <Breadcrumbs
                  pageTitle={pageTitle}
                  category={category}
                  pageSlug={pageSlug}
                />
              )
            }
          </div>
          <div>
            <div
              class="group flex items-center justify-end gap-1 py-1 font-mono text-xs"
            >
              <label class="text-textVariant" for="theme-toggle">theme:</label>
              <select
                class="px-1 font-sans text-text"
                name="theme-toggle"
                id="theme-toggle"
              >
                <option value="auto">auto</option>
                <option value="dark">dark</option>
                <option value="light">light</option>
                <hr />
                <option value="hacker">hacker</option>
                <option value="red-dragon">red dragon</option>
                <option value="snes">snes</option>
                <option value="ube">ube</option>
                <option value="vice-city">vice city</option>
              </select>
            </div>
            <div
              class="group hidden items-center gap-1 py-1 font-mono text-xs sm:flex"
            >
              <label class="text-textVariant" for="cursor-effect"
                >cursor effect:
              </label>
              <select
                class="px-1 font-sans text-text"
                name="cursor-effect"
                id="cursor-effect"
              >
                <option selected value="none">none</option>
                <hr />
                <option value="rainbow">rainbow</option>
                <option value="ghost">ghost</option>
                <option value="trailing">trailing</option>
                <option value="bubbles">bubbles</option>
                <option value="snowflakes">snowflakes</option>
                <option value="fairy dust">fairy dust</option>
              </select>
            </div>
          </div>
        </div>
      </nav>
      <main>
        <slot />
      </main>
      <Footer />
    </div>
    <style>
      body {
        background: rgb(var(--background));
        background-repeat: repeat;
      }

      .dark body {
        background: black;
      }

      @media screen and (prefers-reduced-motion: no-preference) {
        /* https://maya.land/ */
        .dark body {
          background-image: url("/star.gif");
        }
      }
    </style>

    <script>
      // @ts-ignore
      const select: HTMLSelectElement = document.querySelector("#theme-toggle");
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      mediaQuery.addEventListener("change", (e) => {
        if (select.value === "auto") {
          if (e.matches) {
            document.documentElement.classList.remove(
              "light",
              "hacker",
              "red-dragon",
              "ube",
              "snes",
              "vice-city",
            );
            document.documentElement.classList.add("dark");
          } else {
            document.documentElement.classList.remove(
              "dark",
              "hacker",
              "red-dragon",
              "ube",
              "snes",
              "vice-city",
            );
            document.documentElement.classList.add("light");
          }
        }
      });
    </script>

    <script is:inline type="module" data-astro-rerun>
      import * as cursors from "https://unpkg.com/cursor-effects@latest/dist/esm.js";

      function init() {
        const cursorEffects = document.querySelector("#cursor-effect");
        let currentCursorEffect = null;
        const enableCursorEffects = localStorage.getItem("cursor-effects");

        if (window.innerWidth < 640) {
          console.log(window.innerWidth);
          if (currentCursorEffect) {
            console.log("destroy");
            currentCursorEffect.destroy();
            currentCursorEffect = null;
          }
          return;
        } else if (enableCursorEffects === null) {
          localStorage.setItem("cursor-effects", "none");
        } else {
          cursorEffects.value = enableCursorEffects;
          switch (enableCursorEffects) {
            case "rainbow":
              currentCursorEffect = new cursors.rainbowCursor();
              break;
            case "ghost":
              currentCursorEffect = new cursors.ghostCursor();
              break;
            case "trailing":
              currentCursorEffect = new cursors.trailingCursor();
              break;
            case "bubbles":
              currentCursorEffect = new cursors.bubbleCursor();
              break;
            case "snowflakes":
              currentCursorEffect = new cursors.snowflakeCursor();
              break;
            case "fairy dust":
              currentCursorEffect = new cursors.fairyDustCursor();
              break;
            case "none":
              if (currentCursorEffect) {
                currentCursorEffect.destroy();
                currentCursorEffect = null;
              }
              break;
          }
        }

        cursorEffects?.addEventListener("change", (e) => {
          if (currentCursorEffect) {
            currentCursorEffect.destroy();
            currentCursorEffect = null;
          }

          switch (e.target.value) {
            case "rainbow":
              currentCursorEffect = new cursors.rainbowCursor();
              break;
            case "ghost":
              currentCursorEffect = new cursors.ghostCursor();
              break;
            case "trailing":
              currentCursorEffect = new cursors.trailingCursor();
              break;
            case "bubbles":
              currentCursorEffect = new cursors.bubbleCursor();
              break;
            case "snowflakes":
              currentCursorEffect = new cursors.snowflakeCursor();
              break;
            case "fairy dust":
              currentCursorEffect = new cursors.fairyDustCursor();
              break;
            case "none":
              if (currentCursorEffect) {
                currentCursorEffect.destroy();
              }
              break;
          }

          localStorage.setItem("cursor-effects", e.target.value);
        });
      }

      init();

      document.addEventListener("astro:after-swap", () => {
        init();
      });

      window.onresize = () => {
        console.log("resized");
        init();
      };
    </script>
  </body>
</html>
