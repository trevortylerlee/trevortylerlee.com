---
import "../styles/global.css";
import "../styles/preflight.css";

import { Icon } from "astro-icon/components";

import Navigation from "../components/Navigation.astro";
import Contact from "../components/Contact.tsx";
import Footer from "@components/Footer.astro";

const buildTime = new Date().toISOString();

const { pageTitle, pageSlug, category, fullWidth } = Astro.props;

// Displays "go home" link if not at index
let onIndex = false;
if (pageTitle === "Trevor Lee | Homepage") {
  onIndex = true;
}
---

<html id="html" lang="en" prefix="og: http://ogp.me/ns#">
  <head>
    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();

      if (theme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }

      window.addEventListener("DOMContentLoaded", () => {
        const checkbox = document.querySelector("#theme-toggle");
        checkbox.checked = document.documentElement.classList.contains("dark");

        const toggleTheme = () => {
          const isDark = document.documentElement.classList.toggle("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
          checkbox.checked = isDark;
        };

        checkbox.addEventListener("change", toggleTheme);
      });
    </script>
    <script
      defer
      src="https://analytics.us.umami.is/script.js"
      data-website-id="db9f8fea-3974-458c-8aeb-27c9461841e4"></script>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" href="/favicon.png" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:image" content="/og.jpg" />
    <meta name="description" content="Trevor Tyler Lee | Vancouver, Canada" />
    <title>{pageTitle}</title>
  </head>
  <body>
    <div
      class=`bg-background text-gray-11 dark:bg-black dark:text-gray-1 m-auto ${fullWidth ? "" : "px-4"} m-auto max-w-[640px]`
    >
      <nav class="w-full py-4">
        <div class="flex items-center justify-between">
          <div>
            {
              !onIndex && (
                <>
                  <a
                    class="text-gray-6 hover:text-foreground focus:text-foreground flex items-center gap-1 py-1 font-mono no-underline"
                    href="/"
                  >
                    <Icon name="arrow-left" /> back home
                  </a>
                </>
              )
            }
          </div>
          <div class="group flex items-center gap-1.5 py-1">
            <input name="theme-toggle" id="theme-toggle" type="checkbox" />
            <label
              class="text-gray-6 hover:text-foreground focus:text-foreground group-hover:text-foreground group-focus:text-foreground font-mono"
              for="theme-toggle">dark mode</label
            >
          </div>
        </div>
      </nav>
      <main>
        <slot />
      </main>
      <Footer />
      <div id="build-time" data-time={buildTime}>
        <div
          id="last-updated"
          class="text-gray-6 pb-4 pt-2 text-right font-mono text-xs"
        >
          updated
        </div>
      </div>
    </div>
  </body>
</html>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const buildTimeString = document.getElementById("build-time").dataset.time;
    const buildTime = new Date(buildTimeString);

    if (!isNaN(buildTime.getTime())) {
      const now = new Date();
      const timeAgoText = timeAgo(buildTime, now);
      document.getElementById("last-updated").textContent =
        `updated ${timeAgoText}`;
    } else {
      console.error("Invalid build time:", buildTimeString);
    }
  });

  function timeAgo(datePast, dateNow) {
    const seconds = Math.floor((dateNow - datePast) / 1000);
    let interval = Math.floor(seconds / 31536000);

    if (interval >= 1) {
      return interval + " year" + (interval === 1 ? "" : "s") + " ago";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval >= 1) {
      return interval + " month" + (interval === 1 ? "" : "s") + " ago";
    }
    interval = Math.floor(seconds / 86400);
    if (interval >= 1) {
      return interval + " day" + (interval === 1 ? "" : "s") + " ago";
    }
    interval = Math.floor(seconds / 3600);
    if (interval >= 1) {
      return interval + " hour" + (interval === 1 ? "" : "s") + " ago";
    }
    interval = Math.floor(seconds / 60);
    if (interval >= 1) {
      return interval + " minute" + (interval === 1 ? "" : "s") + " ago";
    }
    return (
      Math.floor(seconds) + " second" + (seconds === 1 ? "" : "s") + " ago"
    );
  }
</script>

<style>
  body {
    background: rgb(var(--background));
    background-repeat: repeat;
  }

  .dark body {
    background: black;
  }

  @media screen and (prefers-reduced-motion: no-preference) {
    .dark body {
      background-image: url("/star.gif");
    }
  }
</style>
